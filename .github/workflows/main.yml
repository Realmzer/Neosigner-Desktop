name: Build macOS App

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write # Required for creating releases
  packages: read

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
          # Verify tkinter is available (it's part of standard library)
          python -c "import tkinter; print('Tkinter is available, version:', tkinter.TkVersion)"
      
      - name: Clone zsign if needed
        run: |
          if [ ! -d "zsign" ]; then
            git clone https://github.com/zhlynn/zsign.git
          fi
      
      - name: Install build dependencies
        run: |
          brew update
          brew install pkg-config openssl@1.1 minizip
          brew install libimobiledevice ideviceinstaller create-dmg
      
      - name: Build zsign
        run: |
          cd zsign/build/macos
          make clean && make
          cd ../../..
          
          # Print where the binary is
          find zsign -name zsign -type f
          
          # Create bin directory and copy zsign
          mkdir -p bin
          cp zsign/bin/zsign bin/
          chmod +x bin/zsign
          
          # Verify that zsign works
          bin/zsign -v
      
      - name: Create app bundle structure
        run: |
          mkdir -p resources/bin
          cp bin/zsign resources/bin/
          
          # Copy ideviceinstaller and dependencies
          IDEVICEINSTALLER_PATH=$(which ideviceinstaller)
          cp "$IDEVICEINSTALLER_PATH" resources/bin/
          
          # Copy libimobiledevice utilities
          for util in idevice_id ideviceinfo idevicename; do
            UTIL_PATH=$(which $util)
            if [ -n "$UTIL_PATH" ]; then
              cp "$UTIL_PATH" resources/bin/
            fi
          done
          
          # Copy shared libraries that these binaries depend on
          for bin_file in resources/bin/*; do
            if [ -f "$bin_file" ] && [ -x "$bin_file" ]; then
              echo "Copying dependencies for $bin_file"
              otool -L "$bin_file" | grep -v "/System" | grep -v "/usr/lib" | awk '{print $1}' | while read -r lib; do
                if [[ "$lib" == *"/"* ]]; then
                  lib_base=$(basename "$lib")
                  echo "Copying $lib to resources/bin/$lib_base"
                  cp "$lib" "resources/bin/$lib_base" || echo "Failed to copy $lib"
                  # Fix the rpath in the binary
                  install_name_tool -change "$lib" "@executable_path/$lib_base" "$bin_file" || echo "Failed to change path for $lib in $bin_file"
                fi
              done
            fi
          done
      
      - name: Create app launcher
        run: |
          cat > app_launcher.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import subprocess
          import tkinter as tk
          from tkinter import messagebox
          
          # Get the application path
          if getattr(sys, 'frozen', False):
              # Running as a bundled executable
              application_path = os.path.dirname(sys.executable)
              # For Mac app bundles, need to go up a few levels to access resources
              if os.path.exists(os.path.join(application_path, '..', 'Resources')):
                  resources_path = os.path.abspath(os.path.join(application_path, '..', 'Resources'))
                  bin_path = os.path.join(resources_path, 'bin')
              else:
                  resources_path = os.path.join(application_path, 'resources')
                  bin_path = os.path.join(resources_path, 'bin')
          else:
              # Running as a script
              application_path = os.path.dirname(os.path.abspath(__file__))
              resources_path = os.path.join(application_path, 'resources')
              bin_path = os.path.join(resources_path, 'bin')
          
          print(f"Application path: {application_path}")
          print(f"Resources path: {resources_path}")
          print(f"Bin path: {bin_path}")
          
          # Add bin directory to PATH
          if os.path.exists(bin_path):
              os.environ['PATH'] = f"{bin_path}:{os.environ.get('PATH', '')}"
              print(f"Added {bin_path} to PATH")
              
              # Make sure binaries are executable
              for binary in os.listdir(bin_path):
                  binary_path = os.path.join(bin_path, binary)
                  if os.path.isfile(binary_path) and not os.access(binary_path, os.X_OK):
                      os.chmod(binary_path, 0o755)
                      print(f"Made {binary_path} executable")
          else:
              print(f"Warning: Bin path {bin_path} does not exist")
          
          # Import zsign_gui here to ensure PATH is set first
          try:
              import zsign_gui
          except ImportError as e:
              print(f"Error importing zsign_gui: {e}")
              tk.Tk().withdraw()
              messagebox.showerror("Error", f"Failed to import zsign_gui: {e}")
              sys.exit(1)
          
          # Launch the GUI
          if __name__ == "__main__":
              try:
                  root = tk.Tk()
                  app = zsign_gui.ZsignGUI(root)
                  root.mainloop()
              except Exception as e:
                  print(f"Error launching app: {e}")
                  if not root.winfo_exists():
                      root = tk.Tk()
                      root.withdraw()
                  messagebox.showerror("Error", f"Failed to launch app: {e}")
                  sys.exit(1)
          EOF
      
      - name: Create simplified PyInstaller spec file
        run: |
          cat > iPASideloader.spec << EOF
          # -*- mode: python ; coding: utf-8 -*-

          block_cipher = None

          a = Analysis(
              ['app_launcher.py'],
              pathex=[],
              binaries=[],
              datas=[('resources', 'resources'), ('zsign_gui.py', '.')],
              hiddenimports=['tkinter', 'tkinter.ttk', 'tkinter.filedialog', 'tkinter.messagebox', 'tkinter.scrolledtext'],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='iPASideloader',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              console=True,  # Set to True for debugging
              disable_windowed_traceback=False,
              argv_emulation=True,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=True,
              upx_exclude=[],
              name='iPASideloader',
          )
          app = BUNDLE(
              coll,
              name='iPASideloader.app',
              bundle_identifier='com.neoarz.ipasideloader',
              info_plist={
                  'CFBundleShortVersionString': '1.0.0',
                  'NSHighResolutionCapable': 'True'
              },
          )
          EOF
      
      - name: Build macOS app
        run: |
          pyinstaller --clean iPASideloader.spec
      
      - name: Verify app structure
        run: |
          echo "Checking app structure..."
          find dist/iPASideloader.app -type f | grep -v "__pycache__" | sort
          
          echo "Checking if zsign is included and executable..."
          ls -la dist/iPASideloader.app/Contents/MacOS/resources/bin/zsign
      
      - name: Create zip of app
        run: |
          cd dist
          zip -r iPASideloader.zip iPASideloader.app
          cd ..
      
      - name: Get version from tag
        id: get_version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION="dev-$(date +'%Y%m%d%H%M%S')"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Rename zip
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          mv dist/iPASideloader.zip "iPASideloader-$VERSION.zip"
      
      - name: Upload app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: iPASideloader-${{ steps.get_version.outputs.VERSION }}
          path: iPASideloader-${{ steps.get_version.outputs.VERSION }}.zip
      
      - name: Create Release and Upload Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: iPASideloader-${{ steps.get_version.outputs.VERSION }}.zip
          draft: false
          prerelease: false 
